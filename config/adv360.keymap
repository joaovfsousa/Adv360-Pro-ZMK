/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 12

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <66 65 69 70 15 16 17 18 19 32 29 30 31 33 51 50 49 48 47>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <22 23 24 25 26 58 57 43 44 42 56 41 40 54 55 69 70 65 66>;
        };

        hmlG: hmlG {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLG";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <22 23 24 25 26 58 57 43 44 42 56 41 40 54 55 69 70 65 66 16 15 19 47 48 49 50 51 18 17 32 30 29 33>;
        };

        space_lt: space_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        clt: clt {
            compatible = "zmk,behavior-hold-tap";
            label = "CLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <500>;
            quick-tap-ms = <150>;
        };

        hmr_hwu: hmr_hwu {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_HWU";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <66 65 69 70 15 16 17 18 19 32 29 30 31 33 51 50 49 48 47>;
            hold-while-undecided;
        };

        hml_hwu: hml_hwu {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_HWU";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <22 23 24 25 26 58 57 43 44 42 56 41 40 54 55 69 70 65 66>;
            hold-while-undecided;
        };

        spacetab: spacetab {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACETAB";
            bindings = <&space_lt 1 SPACE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps-shift {
            bindings = <&caps_word>;
            key-positions = <32 41>;
            require-prior-idle-ms = <200>;
        };

        tab2 {
            bindings = <&kp TAB>;
            key-positions = <18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        T_base {
            bindings = <
&none  &none         &none        &none             &none                  &none                    &none                                               &none             &none                    &none                  &none        &none        &none                 &none
&none  &kp Q         &kp W        &kp E             &kp R                  &kp T                    &none                                               &none             &kp Y                    &kp U                  &kp I        &kp O        &kp P                 &none
&none  &hml LCTRL A  &hml LALT S  &hmlG LEFT_GUI D  &hml_hwu LEFT_SHIFT F  &hml LS(LC(LA(LGUI))) G  &none      &none       &none      &none  &none      &none             &hmr LS(LA(LC(LGUI))) H  &hmr_hwu LEFT_SHIFT J  &hmr LGUI K  &hmr LALT L  &hmr LCTRL SEMICOLON  &none
&none  &kp Z         &kp X        &kp C             &kp V                  &kp B                                           &none      &none                               &kp N                    &kp M                  &kp COMMA    &kp DOT      &kp SLASH             &none
&none  &none         &none        &none             &none                                           &spacetab  &clt 3 ESC  &mo 4      &none  &kp ENTER  &clt 2 BACKSPACE                           &none                  &none        &none        &none                 &none
            >;
        };

        T_numbers {
            bindings = <
&none  &none                &none               &none                   &none                     &none                           &none                                     &none  &none                            &none                     &none               &none               &none                &none
&none  &kp LA(NUMBER_6)     &kp LA(N7)          &kp LA(N8)              &kp LA(N9)                &kp LA(N0)                      &none                                     &none  &none                            &none                     &none               &none               &none                &none
&none  &hml LCTRL NUMBER_1  &hml LALT NUMBER_2  &hml LEFT_GUI NUMBER_3  &hml LEFT_SHIFT NUMBER_4  &hml LS(LC(LA(LGUI))) NUMBER_5  &none   &none   &none      &none  &none   &none  &hmr LS(LA(LC(EQUAL))) NUMBER_6  &hmr LEFT_SHIFT NUMBER_7  &hmr LGUI NUMBER_8  &hmr LALT NUMBER_9  &hmr LCTRL NUMBER_0  &none
&none  &kp LA(NUMBER_1)     &kp LA(NUMBER_2)    &kp LA(NUMBER_3)        &kp LA(NUMBER_4)          &kp LA(NUMBER_5)                                &none      &none                 &kp LA(NUMBER_6)                 &kp LA(NUMBER_7)          &kp LA(NUMBER_8)    &kp LA(NUMBER_9)    &kp LA(NUMBER_0)     &none
&none  &none                &none               &none                   &none                                                     &trans  &trans  &none      &none  &trans  &mo 4                                   &none                     &none               &none               &none                &none
            >;
        };

        T_symbols {
            bindings = <
&none  &none                    &none                    &none                &none                  &none                     &none                                     &none   &none                     &none                 &none            &none                 &none                    &none
&none  &kp EXCLAMATION          &kp AT_SIGN              &kp HASH             &kp DOLLAR             &kp PERCENT               &none                                     &none   &kp CARET                 &kp AMPERSAND         &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &none
&none  &hml LCTRL LEFT_BRACKET  &hml LALT RIGHT_BRACKET  &hml LEFT_GUI GRAVE  &hml LEFT_SHIFT MINUS  &kp LS(LA(LC(LEFT_GUI)))  &none   &none   &none      &none  &none   &none   &kp LS(LA(LC(LEFT_GUI)))  &hmr LEFT_SHIFT PLUS  &hmr LGUI TILDE  &hmr LALT BACKSLASH   &hmr LCTRL SINGLE_QUOTE  &none
&none  &kp LEFT_BRACE           &kp RIGHT_BRACE          &kp TILDE            &kp UNDER              &none                                     &none      &none                  &none                     &kp EQUAL             &none            &kp PIPE              &kp DQT                  &none
&none  &none                    &none                    &none                &none                                            &trans  &trans  &none      &none  &trans  &trans                            &none                 &none            &none                 &none                    &none
            >;
        };

        T_nav {
            bindings = <
&none  &none            &none             &none                      &none                          &none                         &none                                     &none   &none           &none           &none         &none            &none                 &none
&none  &none            &kp LEFT_ARROW    &kp UP_ARROW               &kp DOWN_ARROW                 &kp RIGHT_ARROW               &none                                     &none   &none           &none           &none         &none            &kp LS(LG(NUMBER_2))  &none
&none  &hml LCTRL C_PP  &hml LALT C_PREV  &hml LEFT_GUI C_VOLUME_UP  &hml LEFT_SHIFT C_VOLUME_DOWN  &hml LS(LC(LA(LGUI))) C_NEXT  &none   &none   &none      &none  &none   &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &none                 &none
&none  &kp LG(Z)        &kp LG(X)         &kp LG(C)                  &kp LG(V)                      &none                                         &none      &none                  &none           &none           &none         &none            &kp LS(LG(NUMBER_5))  &none
&none  &none            &none             &none                      &none                                                        &trans  &trans  &none      &none  &trans  &trans                  &none           &none         &none            &none                 &none
            >;
        };

        T_Keyboard {
            bindings = <
&none  &none         &none         &none         &none         &none                 &none                                       &none     &none               &none              &none               &none              &none  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &none                                       &none     &mkp MB1            &msc SCRL_DOWN     &msc SCRL_UP        &mkp MB2           &none  &none
&none  &kp LCTRL     &kp LALT      &kp LEFT_GUI  &kp LSHFT     &kp LS(LC(LA(LGUI)))  &none   &none   &none      &none  &none     &none     &mmv MOVE_X(-3000)  &mmv MOVE_Y(3000)  &mmv MOVE_Y(-3000)  &mmv MOVE_X(3000)  &none  &none
&none  &bt BT_CLR    &bl BL_TOG    &none         &none         &out OUT_TOG                          &none      &none                      &mmv MOVE_LEFT      &mmv MOVE_DOWN     &mmv MOVE_UP        &mmv MOVE_RIGHT    &none  &none
&none  &none         &none         &none         &none                               &trans  &trans  &none      &none  &mkp MB2  &mkp MB1                      &none              &none               &none              &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
